{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Results comparison to SLAMMER \n",
        "bibliography: references.bib\n",
        "sidebar: main\n",
        "---"
      ],
      "id": "d60c305a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "from pathlib import Path\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "import pyslammer as slam\n",
        "import scipy.stats.mstats as ssmstat\n",
        "from cycler import cycler\n",
        "from great_tables import GT, md, html\n",
        "plt.style.use(slam.psfigstyle)"
      ],
      "id": "0dad276c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "PySLAMMER's rigid, decoupled, and coupled analysis methods are intended to produce sliding block analysis results that match the legacy SLAMMER results. This is an important feature for sliding block displacements, which are used as a performance index (as opposed to providing a direct prediction of actual slope displacement) in practice. Equivalence with legacy results allows new results to be interpreted with reference to historical analyses and experience.\n",
        "\n",
        "## Approach\n",
        "\n",
        "To demonstrate pySLAMMER's equivalence to SLAMMER, we performed several sliding block analyses across a broad parametric space. The three main categories of parameters studied were ground motion, analysis method, and analysis options.\n",
        "\n",
        "### Ground motion\n",
        "\n",
        "We used the motions from pySLAMMER's built-in sample ground motion suite at several scales to capture a reasonable breadth of the familiar key engineering ground motion characteristics (frequency, amplitude, and duration). The acceleration response spectra for the input motion suite are shown in @fig-resp. Additional details on the ground motions are provided on the [ground motion suite page](ground_motions.qmd)."
      ],
      "id": "31487c51"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| label: fig-resp\n",
        "#| fig-align: center\n",
        "#| fig-cap: Acceleration response spectra for input ground motions\n",
        "\n",
        "# Navigate to ground motion suite response spectra files\n",
        "current_dir = os.getcwd()\n",
        "folder_path = Path(current_dir).resolve().parents[1] / \"verification_files\" / \"pySLAMMER_suite_response_spectra\"\n",
        "csv_files = list(folder_path.glob(\"*.csv\"))\n",
        "\n",
        "# Read each CSV file into a DataFrame and store them in a list\n",
        "freq_index = 0\n",
        "resp_index = 1\n",
        "spectra = {}\n",
        "for csv_file in csv_files:\n",
        "    data = np.loadtxt(csv_file, delimiter=\",\", skiprows=2)\n",
        "    # convert response from cm/s^2 to g's\n",
        "    data[:, resp_index] = data[:, resp_index] / 981\n",
        "    spectra[csv_file.name.strip(\".csv\")] = data\n",
        "\n",
        "# Initialize the plot\n",
        "fig, ax = plt.subplots()\n",
        "ax.set_prop_cycle(cycler(color=plt.cm.tab20.colors))\n",
        "for motion in spectra:\n",
        "    ax.plot(\n",
        "        1/spectra[motion][:, freq_index],\n",
        "        spectra[motion][:, resp_index],\n",
        "        label=motion,\n",
        "        linewidth=0.5,\n",
        "    )\n",
        "\n",
        "ax.text(0.012, 2.75, \"5% damping\")\n",
        "# Add labels, legend, and grid\n",
        "ax.set_xlabel(\"Period (s)\")\n",
        "ax.set_ylabel(\"Spectral Acceleration (g)\")\n",
        "ax.set_title(\"Response Spectra\")\n",
        "ax.set_xscale(\"log\")\n",
        "ax.set_ylim(0,3)\n",
        "ax.set_xlim(0.01,100)\n",
        "\n",
        "ax.legend(\n",
        "    loc=\"center left\", \n",
        "    bbox_to_anchor=(0.6, 0.6), \n",
        "    fontsize=\"x-small\", \n",
        "    title=\"Ground Motion\", \n",
        "    title_fontsize=\"medium\",\n",
        "    frameon=False\n",
        ")\n",
        "\n",
        "plt.show()"
      ],
      "id": "fig-resp",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Analysis methods\n",
        "\n",
        "The three rigorous analysis methods that SLAMMER performs are the Rigid, Decoupled, and Coupled methods. Each of these methods, which are briefly described below, are implemented in pySLAMMER and included in this comparison.\n",
        "\n",
        "Rigid Block Analysis\n",
        "\n",
        ":   Conceptualized by Whitman in 1963 and further developed by Newmark in 1965 (@marcuson1994, @newmark1965), rigid block analysis models a potential landslide mass as a rigid mass on an inclined plane base with a perfectly plastic frictional interface. The rigid block motion matches the base motion exactly until the acceleration of the base exceeds some critical value (the yield acceleration, $k_y$). Once this critical $k_y$ value is reached, the block's acceleration remains constant $k_y$, resulting in relative velocity and displacement between block and base. The relative velocity is calculated by integrating the difference between the block and base accelerations. The displacement accumulated by the block moving down the ramp is calculated by integrating the relative velocity. Sliding stops (i.e., block motion again matches base motion exactly) when the relative velocity reaches zero.\n",
        "\n",
        "Decoupled Analysis\n",
        "\n",
        ":   Landslide materials are, of course, not rigid. Except for very shallow, stiff slide masses, the rigid block model does a poor job of approximating the dynamics of a co-seismic landslide system. The decoupled method was developed to provide some way of accounting for the deformation of the slope mass due to shaking (@seed1966, @makdisi1978) . It consists of two distinct (or decoupled, if you will) calculations: *dynamic response* and *rigid sliding*. During the dynamic response phase, the possibility of sliding is ignored while the slope response to strong ground motion is calculated. The average internal acceleration of the slope mass during this first phase is then used as the base input acceleration for the second phase (rigid sliding) which is simply a rigid block analysis.\n",
        "\n",
        "Coupled Analysis\n",
        "\n",
        ":   As indicated by the name, coupled analysis takes the two separate calculations from the decoupled analysis and performs them simultaneously. @chopra1991 introduced a model for earthquake-induced sliding of concrete gravity dams that considered the dynamic response of the dam during sliding. @rathje1999 modified the procedure and applied it to earth structures. With coupled sliding, the sliding mass's dynamic response is calculated for both sliding and non-sliding conditions. Sliding stops when the relative velocity of the sliding mass reaches zero. The stop of sliding can introduce an abrupt change in acceleration applied to the sliding mass. Because the dynamic response is being calculated continually through the analysis, the approach to identifying the timing of these abrupt changes will affect potential subsequent sliding events.\n",
        "\n",
        "Dynamic Response\n",
        "\n",
        ":   The Decoupled and Coupled methods both require the calculation of the slope's dynamic response. The two methods for dynamic response in SLAMMER, which have been carried over to pySLAMMER are *linear elastic* and *equivalent linear*.\n",
        "\n",
        "### Analysis options\n",
        "\n",
        "SLAMMER allows users to include a constant $k_y$ value or a variable $k_y$ that changes with accumulated sliding displacement. The $k_y$ -- displacement relationship is stepwise with a table of paired values. This feature provides a rough means of approximating post-peak residual strength. [^1]\n",
        "\n",
        "[^1]: pySLAMMER includes additional options for variable yield acceleration, but only stepwise variation is applicable to comparison with SLAMMER\n",
        "\n",
        "The dynamic response of the system (applicable to decoupled and coupled analyses) is calculated using either *linear elastic* or *equivalent linear* assumptions. The minimum input parameters needed for the linear elastic analyses are a damping ration, the slope height, and the shear wave velocity of the material above and below the slip surface. For equivalent linear analysis, a reference strain parameter is also needed. Although not explicitly documented, inspection of the SLAMMER source code uses Darendeli (2001) modulus reduction and damping curves with a curvature coefficient of 1.\n",
        "\n",
        "Separate entries for the shear wave velocity of the material above and below the slip surface ($V_s$ and $V_b$, respectively) are used to introduce an equivalent foundation radiation damping into the viscous material damping as described by @lee2004. This happens behind the scenes in SLAMMER by default and cannot be turned off. [^2]\n",
        "\n",
        "[^2]: If lower total damping than the equivalent foundation radiation damping is needed for some reason (e.g., for comparison with published analyses that did not include this damping mechanism) both SLAMMER and pySLAMMER accept negative values for damping ratio, which can be used to offset the damping applied by the foundation radiation damping.\n",
        "\n",
        "@tbl-params shows the analysis options and ranges of input values used in the group of simulations used to compare pySLAMMER to"
      ],
      "id": "5ee84beb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| label: tbl-params\n",
        "#| tbl-cap: Sliding block parameters used for pySLAMMER to SLAMMER comparison analyses.\n",
        "\n",
        "kykmax = [0.05, 1.0]\n",
        "tmts = [0.1, 10.0]\n",
        "height = [0.1, 100]\n",
        "vs =  [200, 1200]\n",
        "vsvb =  [0.1, 100]\n",
        "damp =  [5, 25]\n",
        "ref_str =  [1, 10]\n",
        "\n",
        "params = {\n",
        "    \"param\": [\n",
        "        \"Methods\",\n",
        "        \"Dynamic Resp.\",\n",
        "        \"ky/kmax\",\n",
        "        \"Tm/Tx *\",\n",
        "        \"Slope height (m) *\",\n",
        "        \"Slope shear wave vel., Vs (m/s) *\",\n",
        "        \"Vs/Vb *\",\n",
        "        \"Damping (%) *\",\n",
        "        \"Reference strain (%) **\"\n",
        "    ],\n",
        "    \"val\": [\n",
        "        \"Rigid, Decoupled, Coupled\",\n",
        "        \"Linear elastic, Equivalent linear\",\n",
        "        f\"{kykmax[0]} to {kykmax[1]}\",\n",
        "        f\"{tmts[0]} to {tmts[1]}\",\n",
        "        f\"{height[0]} to {height[1]}\",\n",
        "        f\"{vs[0]} to {vs[1]}\",\n",
        "        f\"{vsvb[0]} to {vsvb[1]}\",\n",
        "        f\"{damp[0]} to {damp[1]}\",\n",
        "        f\"{ref_str[0]} to {ref_str[1]}\"\n",
        "    ]\n",
        "}\n",
        "\n",
        "# * only applicable to Decoupled and Coupled methods\n",
        "# ** only applicable to equivalent linear dynamic response\n",
        "\n",
        "tbl = (\n",
        "    GT(pd.DataFrame(params))\n",
        "    .cols_label(\n",
        "    param=html(\"Parameter\"),\n",
        "    val=html(\"Range / Options used\")\n",
        "    )\n",
        "    .cols_align(align=\"center\", columns=1)\n",
        "    .tab_source_note(\"* Only applies to Decouled and Coupled analyses\") \n",
        "    .tab_source_note(\"** Only applies to equivalent linear analyses\")\n",
        ")\n",
        "tbl"
      ],
      "id": "tbl-params",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Results\n",
        "\n",
        "Although the Python code in pySLAMMER essentially uses the same algorithms as the Java code in SLAMMER, some non-zero differences in results should be expected due to minor numerical differences (e.g., number type handling, order of operations) [@ince2012]. However, the results can be considered functionally equivalent if they contain no apparent tendency to diverge and the differences are relatively small. For engineering purposes, sliding block displacements below 0.5 cm can be considered equivalent to zero displacement [@bray2019]. The results of the simulations across the parametric space described in @tbl-params are shown on @fig-comp. The data are plotted on a log-log scale to make minor numerical differences visible near and below the \"equivalent zero\" displacement threshold. As indicated by the linear regression, the differences between SLAMMER and pySLAMMER results are negligibly small relative to the scales of engineering significance."
      ],
      "id": "d1f1aa63"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| label: fig-comp\n",
        "#| fig-align: center\n",
        "#| fig-cap: Comparison of pySLAMMER and SLAMMER analysis results. At this scale, the differences are too small to be distinguished visually.\n",
        "\n",
        "# Load SLAMMER and pySLAMMER results from verification data\n",
        "import json\n",
        "import gzip\n",
        "from matplotlib.patches import FancyArrowPatch\n",
        "\n",
        "# Load SLAMMER results\n",
        "with gzip.open('../../verification_files/verification_data/results/slammer_results.json.gz', 'rt') as f:\n",
        "    slammer_data = json.load(f)\n",
        "\n",
        "# Load pySLAMMER results (using latest version)\n",
        "with gzip.open('../../verification_files/verification_data/results/pyslammer_0.2.3_results.json.gz', 'rt') as f:\n",
        "    pyslammer_data = json.load(f)\n",
        "\n",
        "# Create comparison dataframe\n",
        "comparison_data = []\n",
        "\n",
        "# Create lookup for pySLAMMER results by analysis_id\n",
        "pyslammer_lookup = {analysis['analysis_id']: analysis for analysis in pyslammer_data['analyses']}\n",
        "\n",
        "for slammer_analysis in slammer_data['analyses']:\n",
        "    analysis_id = slammer_analysis['analysis_id']\n",
        "    \n",
        "    if analysis_id in pyslammer_lookup:\n",
        "        pyslammer_analysis = pyslammer_lookup[analysis_id]\n",
        "        \n",
        "        # Get method name and convert to title case\n",
        "        method = slammer_analysis['analysis']['method']\n",
        "        method_name = method.title() if method != 'rigid' else 'Rigid'\n",
        "        \n",
        "        comparison_data.append({\n",
        "            'analysis_id': analysis_id,\n",
        "            'Method': method_name,\n",
        "            'SLAMMER': slammer_analysis['results']['normal_displacement_cm'],\n",
        "            'pySLAMMER': pyslammer_analysis['results']['normal_displacement_cm']\n",
        "        })\n",
        "\n",
        "# Create dataframe\n",
        "dfp = pd.DataFrame(comparison_data)\n",
        "\n",
        "# Calculate overall linear regression for statistics display\n",
        "from scipy.stats import linregress\n",
        "slope, intercept, r, p, se = linregress(dfp['SLAMMER'], dfp['pySLAMMER'])\n",
        "\n",
        "\n",
        "plt.close(\"all\")\n",
        "############\n",
        "# pySLAMMER v. SLAMMER\n",
        "############\n",
        "plt.rcParams[\"font.family\"] = \"Arial\"\n",
        "plt.rcParams[\"font.sans-serif\"] = [\"Arial\"]\n",
        "plt.rcParams[\"savefig.dpi\"] = 600\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "\n",
        "\n",
        "keys = [\"Decoupled\", \"Rigid\", \"Coupled\"]\n",
        "markers = [\"^\", \"P\", \"o\"]\n",
        "\n",
        "\n",
        "for i, key in enumerate(keys):\n",
        "    grp = dfp[dfp[\"Method\"] == key]\n",
        "    ax.scatter(grp[\"SLAMMER\"], \n",
        "               grp[\"pySLAMMER\"], \n",
        "               label=key, \n",
        "               alpha=0.35,\n",
        "               marker=markers[i],\n",
        "               s=20\n",
        "               )\n",
        "\n",
        "\n",
        "ax.set_xscale(\"log\")\n",
        "ax.set_yscale(\"log\")\n",
        "ax.set_xlim(1e-3, 1e3)\n",
        "ax.set_ylim(1e-3, 1e3)\n",
        "\n",
        "ax.set_aspect(\"equal\")\n",
        "\n",
        "plt.grid()\n",
        "\n",
        "ax.set_xlabel(\"SLAMMER displacement (cm)\")\n",
        "ax.set_ylabel(\"pySLAMMER displacement (cm)\")\n",
        "\n",
        "# Linear regression\n",
        "\n",
        "ax.plot([1e-3, 1e3], [1e-3, 1e3], color=\"black\", linestyle=\"--\", linewidth=1)\n",
        "\n",
        "ax.text(\n",
        "    0.67,\n",
        "    0.585,\n",
        "    f\"Linear Regression\\nSlope = {slope:.2f}\\nIntercept = {intercept:.1f} cm\\nR$^2$ = {r**2:.3f}\",\n",
        "    transform=ax.transAxes,\n",
        "    fontsize=10,\n",
        "    verticalalignment=\"top\",\n",
        "    bbox=dict(facecolor=\"white\", alpha=1),\n",
        ")\n",
        "\n",
        "# Arrow for linear regression\n",
        "arrow = FancyArrowPatch(\n",
        "    (0.85, 0.6),  # Start point (near text box)\n",
        "    (0.75, 0.75),  # End point (middle of plot, on dashed line)\n",
        "    connectionstyle=\"angle3,angleA=90,angleB=-45\",  # Angle connection style\n",
        "    transform=ax.transAxes,\n",
        "    arrowstyle=\"->\",\n",
        "    mutation_scale=11,\n",
        "    color=\"black\",\n",
        "    alpha=1,\n",
        "    zorder=4\n",
        ")\n",
        "ax.add_patch(arrow)\n",
        "\n",
        "# Engineering range of interest\n",
        "ax.plot([0,0.5,0.5],[0.5,0.5,0], color=\"black\", linestyle=\"-\", linewidth=1)\n",
        "\n",
        "# Add text box with regression statistics\n",
        "ax.text(\n",
        "    0.475,\n",
        "    0.145,\n",
        "    \"Engineering \\\"equivalent zero\\\"\\ndisplacement (0.5 cm)\",\n",
        "    transform=ax.transAxes,\n",
        "    fontsize=10,\n",
        "    verticalalignment=\"top\",\n",
        "    bbox=dict(facecolor=\"white\", alpha=1),\n",
        ")\n",
        "\n",
        "# Arrow for linear regression\n",
        "arrow = FancyArrowPatch(\n",
        "    (0.65, 0.155),  # Start point (near text box)\n",
        "    (0.45, 0.245),  # End point (middle of plot, on dashed line)\n",
        "    connectionstyle=\"angle3,angleA=90,angleB=-5\",  # Angle connection style\n",
        "    transform=ax.transAxes,\n",
        "    arrowstyle=\"->\",\n",
        "    mutation_scale=10,\n",
        "    color=\"black\",\n",
        "    alpha=1,\n",
        "    zorder=4,\n",
        ")\n",
        "ax.add_patch(arrow)\n",
        "\n",
        "# Add legend\n",
        "ax.legend(\n",
        "    loc=\"upper left\",\n",
        "    bbox_to_anchor=(0.05, 0.95),\n",
        "    fontsize=10,\n",
        "    title=\"Method\",\n",
        "    title_fontsize=\"11\",\n",
        "    framealpha=1,\n",
        ")\n",
        "\n",
        "plt.show()"
      ],
      "id": "fig-comp",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Conclusions\n",
        "\n",
        "The results show that pySLAMMER is performing the same rigorous analysis methods as SLAMMER. Across a broad array of input parameters, the results are identical or nearly identical. Minor numerical differences between the output of the two programs is to be expected. However, the differences are so small as to be insignificant for engineering purposes, both in research and practice."
      ],
      "id": "46aca6e8"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/lornearnold/GitHub/pySLAMMER_docs/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}